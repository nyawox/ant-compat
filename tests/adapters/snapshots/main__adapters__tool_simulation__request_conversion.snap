---
source: tests/adapters/tool_simulation.rs
expression: "&result"
---
OpenAIRequest {
    model: "google/gemini-2.5-pro",
    messages: [
        OpenAIMessage {
            role: "system",
            content: Some(
                Text(
                    "In this environment you have access to a set of tools you can use to answer the user's question. Invoke functions by writing a \"<function_calls></function_calls>\" block like the following as part of your reply.\n\n<formatting_guide>\n<function_calls>\n  <invoke name=\"$FUNCTION_NAME\">\n    <parameter name=\"parameter_name\">\"string_value\"</parameter>\n    <parameter name=\"another_string\">\"another_value\"</parameter>\n  </invoke>\n  <invoke name=\"another_function_name\">\n    <parameter name=\"boolean\">false</parameter>\n    <parameter name=\"number\">65536</parameter>\n  </invoke>\n</function_calls>\n</formatting_guide>\n\nParameter Formatting Rules:\n1.  **Scalar Values**: For simple types like strings, numbers, or booleans, provide the value directly between parameter tags.\n2.  **JSON Values**: For multi-line strings, objects or arrays, you MUST wrap the JSON payload in a markdown code block with a `json` tag.\n\nYou can invoke multiple functions in parallel by including multiple <invoke> blocks within the same <function_calls> wrapper.\n\n**Simple parameters:**\n<example>\n<function_calls>\n  <invoke name=\"Read\">\n    <parameter name=\"file_path\">\"/home/user/config.yaml\"</parameter>\n  </invoke>\n  <invoke name=\"GetSystemInfo\">\n    <parameter name=\"include_env\">true</parameter>\n    <parameter name=\"verbose\">true</parameter>\n  </invoke>\n</function_calls>\n</example>\n\n**JSON array:**\n<example>\n<function_calls>\n  <invoke name=\"TodoWrite\">\n    <parameter name=\"todos\">\n```json\n[{\"id\":\"123\",\"content\":\"Review PR #456\",\"status\":\"pending\",\"priority\":\"high\"}]\n```\n    </parameter>\n  </invoke>\n</function_calls>\n</example>\n\nWhen you call tools, place the <function_calls> block at the end of your response. Do not generate any text after the closing </function_calls> tag.\n\nHere are the functions available in JSONSchema format:\n<functions>\n<function>\n{\n  \"description\": \"Get the current weather in a given location.\",\n  \"name\": \"get_weather\",\n  \"parameters\": {\n    \"properties\": {\n      \"location\": {\n        \"description\": \"The city and state, e.g. San Francisco, CA\",\n        \"type\": \"string\"\n      }\n    },\n    \"required\": [\n      \"location\"\n    ],\n    \"type\": \"object\"\n  }\n}\n</function>\n</functions>\n\nYou are a helpful assistant.",
                ),
            ),
            tool_calls: None,
            tool_call_id: None,
        },
        OpenAIMessage {
            role: "user",
            content: Some(
                Text(
                    "What is the weather like in San Francisco?",
                ),
            ),
            tool_calls: None,
            tool_call_id: None,
        },
        OpenAIMessage {
            role: "assistant",
            content: Some(
                Text(
                    "I'll get the weather for you.\n\n<function_calls>\n<invoke name=\"get_weather\"><parameters>{\"location\":\"San Francisco\"}</parameters></invoke>\n</function_calls>",
                ),
            ),
            tool_calls: None,
            tool_call_id: None,
        },
        OpenAIMessage {
            role: "user",
            content: Some(
                Text(
                    "<function_results>\n<result name=\"get_weather\">{\"temperature\":\"72F\"}</result>\n</function_results>",
                ),
            ),
            tool_calls: None,
            tool_call_id: None,
        },
    ],
    max_tokens: Some(
        65536,
    ),
    max_completion_tokens: None,
    temperature: Some(
        0.5,
    ),
    top_p: Some(
        1.0,
    ),
    stop: None,
    stream: Some(
        true,
    ),
    tools: None,
    tool_choice: None,
    reasoning_effort: None,
    stream_options: Some(
        StreamOptions {
            include_usage: Some(
                true,
            ),
        },
    ),
}
